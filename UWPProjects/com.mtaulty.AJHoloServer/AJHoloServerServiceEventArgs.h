//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace mtaulty { namespace AJHoloServer {

// Methods
public ref class AJHoloServerAddWorldAnchorCalledEventArgs sealed
{
public:
    AJHoloServerAddWorldAnchorCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberAnchorId, _In_ uint32 interfaceMemberByteStart, _In_ uint32 interfaceMemberByteLength, _In_ bool interfaceMemberLastBlock, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberAnchorData);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerAddWorldAnchorResult^ Result
    {
        AJHoloServerAddWorldAnchorResult^ get() { return m_result; }
        void set(_In_ AJHoloServerAddWorldAnchorResult^ value) { m_result = value; }
    }

    property Platform::String^ AnchorId
    {
        Platform::String^ get() { return m_interfaceMemberAnchorId; }
    }

    property uint32 ByteStart
    {
        uint32 get() { return m_interfaceMemberByteStart; }
    }

    property uint32 ByteLength
    {
        uint32 get() { return m_interfaceMemberByteLength; }
    }

    property bool LastBlock
    {
        bool get() { return m_interfaceMemberLastBlock; }
    }

    property Windows::Foundation::Collections::IVectorView<byte>^ AnchorData
    {
        Windows::Foundation::Collections::IVectorView<byte>^ get() { return m_interfaceMemberAnchorData; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerAddWorldAnchorResult^>^ GetResultAsync(AJHoloServerAddWorldAnchorCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerAddWorldAnchorResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerAddWorldAnchorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerAddWorldAnchorResult^ m_result;
    Platform::String^ m_interfaceMemberAnchorId;
    uint32 m_interfaceMemberByteStart;
    uint32 m_interfaceMemberByteLength;
    bool m_interfaceMemberLastBlock;
    Windows::Foundation::Collections::IVectorView<byte>^ m_interfaceMemberAnchorData;
};

public ref class AJHoloServerAddHologramToAnchorCalledEventArgs sealed
{
public:
    AJHoloServerAddHologramToAnchorCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberAnchorId, _In_ Platform::String^ interfaceMemberHoloId, _In_ Platform::String^ interfaceMemberHoloTypeName, _In_ AJHoloServerPosition^ interfaceMemberPosition);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerAddHologramToAnchorResult^ Result
    {
        AJHoloServerAddHologramToAnchorResult^ get() { return m_result; }
        void set(_In_ AJHoloServerAddHologramToAnchorResult^ value) { m_result = value; }
    }

    property Platform::String^ AnchorId
    {
        Platform::String^ get() { return m_interfaceMemberAnchorId; }
    }

    property Platform::String^ HoloId
    {
        Platform::String^ get() { return m_interfaceMemberHoloId; }
    }

    property Platform::String^ HoloTypeName
    {
        Platform::String^ get() { return m_interfaceMemberHoloTypeName; }
    }

    property AJHoloServerPosition^ Position
    {
        AJHoloServerPosition^ get() { return m_interfaceMemberPosition; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerAddHologramToAnchorResult^>^ GetResultAsync(AJHoloServerAddHologramToAnchorCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerAddHologramToAnchorResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerAddHologramToAnchorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerAddHologramToAnchorResult^ m_result;
    Platform::String^ m_interfaceMemberAnchorId;
    Platform::String^ m_interfaceMemberHoloId;
    Platform::String^ m_interfaceMemberHoloTypeName;
    AJHoloServerPosition^ m_interfaceMemberPosition;
};

public ref class AJHoloServerRemoveHologramCalledEventArgs sealed
{
public:
    AJHoloServerRemoveHologramCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberHoloId);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerRemoveHologramResult^ Result
    {
        AJHoloServerRemoveHologramResult^ get() { return m_result; }
        void set(_In_ AJHoloServerRemoveHologramResult^ value) { m_result = value; }
    }

    property Platform::String^ HoloId
    {
        Platform::String^ get() { return m_interfaceMemberHoloId; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerRemoveHologramResult^>^ GetResultAsync(AJHoloServerRemoveHologramCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerRemoveHologramResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerRemoveHologramResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerRemoveHologramResult^ m_result;
    Platform::String^ m_interfaceMemberHoloId;
};

public ref class AJHoloServerGetWorldAnchorCalledEventArgs sealed
{
public:
    AJHoloServerGetWorldAnchorCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberAnchorId, _In_ uint32 interfaceMemberByteIndex, _In_ uint32 interfaceMemberByteLength);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerGetWorldAnchorResult^ Result
    {
        AJHoloServerGetWorldAnchorResult^ get() { return m_result; }
        void set(_In_ AJHoloServerGetWorldAnchorResult^ value) { m_result = value; }
    }

    property Platform::String^ AnchorId
    {
        Platform::String^ get() { return m_interfaceMemberAnchorId; }
    }

    property uint32 ByteIndex
    {
        uint32 get() { return m_interfaceMemberByteIndex; }
    }

    property uint32 ByteLength
    {
        uint32 get() { return m_interfaceMemberByteLength; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerGetWorldAnchorResult^>^ GetResultAsync(AJHoloServerGetWorldAnchorCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerGetWorldAnchorResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerGetWorldAnchorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerGetWorldAnchorResult^ m_result;
    Platform::String^ m_interfaceMemberAnchorId;
    uint32 m_interfaceMemberByteIndex;
    uint32 m_interfaceMemberByteLength;
};

public ref class AJHoloServerGetWorldAnchorIdsCalledEventArgs sealed
{
public:
    AJHoloServerGetWorldAnchorIdsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerGetWorldAnchorIdsResult^ Result
    {
        AJHoloServerGetWorldAnchorIdsResult^ get() { return m_result; }
        void set(_In_ AJHoloServerGetWorldAnchorIdsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerGetWorldAnchorIdsResult^>^ GetResultAsync(AJHoloServerGetWorldAnchorIdsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerGetWorldAnchorIdsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerGetWorldAnchorIdsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerGetWorldAnchorIdsResult^ m_result;
};

public ref class AJHoloServerGetHologramIdsAndNamesCalledEventArgs sealed
{
public:
    AJHoloServerGetHologramIdsAndNamesCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerGetHologramIdsAndNamesResult^ Result
    {
        AJHoloServerGetHologramIdsAndNamesResult^ get() { return m_result; }
        void set(_In_ AJHoloServerGetHologramIdsAndNamesResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerGetHologramIdsAndNamesResult^>^ GetResultAsync(AJHoloServerGetHologramIdsAndNamesCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerGetHologramIdsAndNamesResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerGetHologramIdsAndNamesResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerGetHologramIdsAndNamesResult^ m_result;
};

public ref class AJHoloServerGetHologramTransformsCalledEventArgs sealed
{
public:
    AJHoloServerGetHologramTransformsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerGetHologramTransformsResult^ Result
    {
        AJHoloServerGetHologramTransformsResult^ get() { return m_result; }
        void set(_In_ AJHoloServerGetHologramTransformsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerGetHologramTransformsResult^>^ GetResultAsync(AJHoloServerGetHologramTransformsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerGetHologramTransformsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerGetHologramTransformsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerGetHologramTransformsResult^ m_result;
};

// Readable Properties
public ref class AJHoloServerGetDeviceConnectedCountRequestedEventArgs sealed
{
public:
    AJHoloServerGetDeviceConnectedCountRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AJHoloServerGetDeviceConnectedCountResult^ Result
    {
        AJHoloServerGetDeviceConnectedCountResult^ get() { return m_result; }
        void set(_In_ AJHoloServerGetDeviceConnectedCountResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AJHoloServerGetDeviceConnectedCountResult^>^ GetResultAsync(AJHoloServerGetDeviceConnectedCountRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AJHoloServerGetDeviceConnectedCountResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AJHoloServerGetDeviceConnectedCountResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AJHoloServerGetDeviceConnectedCountResult^ m_result;
};

// Writable Properties
} } } 
